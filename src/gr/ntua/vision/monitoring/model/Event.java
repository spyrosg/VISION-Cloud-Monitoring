package gr.ntua.vision.monitoring.model;

import java.util.UUID;


/**
 * This specifies an event.
 */
public interface Event extends JSONExchanged
{
	/**
	 * this provides a taxonomy on event types.
	 */
	public enum EventType
	{
		/** events of this type get generated by probes which regularly take specific metrics. */
		Measurement,
		/** events of this type get generated upon going through the states of various actions. */
		Action,
	}


	/**
	 * This is type of value for all events of type {@link EventType#Action}.
	 */
	public enum ActionStatus
	{
		/***/
		InProgress,
		/***/
		Failed,
		/***/
		Succeded,
	}


	/**
	 * get the event's ID.
	 * 
	 * @return the event's ID.
	 */
	public UUID id();


	/**
	 * get the generating probe ID. Probe's exist for all kinds of events.
	 * 
	 * @return the generating probe ID.
	 */
	public UUID probeID();


	/**
	 * get the ID of the tenant, in the context of which this event took place. Not all events happen in the context of a tenant
	 * and for those that don't this method returns <code>null</code>.
	 * 
	 * @return the tenant ID.
	 */
	public String tenantID();


	/**
	 * get the ID of the user, in the context of which this event took place. Not all events happen in the context of a user and
	 * for those that don't this method returns <code>null</code>.
	 * 
	 * @return the user ID.
	 */
	public String userID();


	/**
	 * get the description of the event (human readable format).
	 * 
	 * @return the description.
	 */
	public String getDescription();


	/**
	 * get the event's value. All events have a value. It's type depends on the event type.
	 * 
	 * @return the event's value.
	 */
	public Object getValue();


	/**
	 * get the event type.
	 * 
	 * @return the event type.
	 */
	public EventType eventType();


	/**
	 * get the resource type of the event. Only events of type {@link EventType#Measurement} are associated with resources. Other
	 * events will return <code>null</code>.
	 * 
	 * @return the associated resource specification, or <code>null</code> if there isn't any.
	 */
	public Resource resourceType();


	/**
	 * get the event source.
	 * 
	 * @return the event source.
	 */
	public Location source();


	/**
	 * get the event target. Not all events have a target.
	 * 
	 * @return the event target, or <code>null</code> if none is associated.
	 */
	public Location target();


	/**
	 * get the event's observer.
	 * 
	 * @return the event's observer.
	 */
	public Location observer();


	/**
	 * starting time of the event. The time is in UNIX format (milliseconds since midnight, 1/1/1971).
	 * 
	 * @return the start time.
	 */
	public long startTime();


	/**
	 * ending time of the event. The time is in UNIX format (milliseconds since midnight, 1/1/1971).
	 * 
	 * @return the end time.
	 */
	public long endTime();


	/**
	 * number of events this one represents.
	 * 
	 * @return the event count.
	 */
	public int aggregationCount();
}
