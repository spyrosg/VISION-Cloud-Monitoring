package gr.ntua.vision.monitoring.model;

import gr.ntua.vision.monitoring.util.Pair;

import java.util.List;
import java.util.UUID;


/**
 * This specifies an event.
 */
public interface Event extends JSONExchanged {
    /**
     * this provides a taxonomy on event types.
     */
    public enum EventType {
        /** events of this type get generated upon going through the states of various actions. */
        Action,
        /** events of this type get generated by probes which regularly take specific metrics. */
        Measurement,
    }


    /**
     * number of events this one represents.
     * 
     * @return the event count.
     */
    public int aggregationCount();


    /**
     * ending time of the event. The time is in UNIX format (milliseconds since midnight, 1/1/1970).
     * 
     * @return the end time.
     */
    public long endTime();


    /**
     * get the event type.
     * 
     * @return the event type.
     */
    public EventType eventType();


    /**
     * get the description of the event (human readable format).
     * 
     * @return the description.
     */
    public String getDescription();


    /**
     * get the event's ID.
     * 
     * @return the event's ID.
     */
    public UUID id();


    /**
     * get the event's observer.
     * 
     * @return the event's observer.
     */
    public Location observer();


    /**
     * get the generating probe ID. Probe's exist for all kinds of events.
     * 
     * @return the generating probe ID.
     */
    public UUID probeID();


    /**
     * get the resources associated with this event.
     * 
     * @return the resources associated with this event.
     */
    public List<Resource> resources();


    /**
     * serialize the event.
     * 
     * @return the event serial form.
     */
    public List<Pair<String, Object>> serialize();


    /**
     * set the event's observer.
     * 
     * @param observer
     *            the event's observer to set.
     * @return <code>this</code>
     */
    public Event setObserver(Location observer);


    /**
     * set both the start and end time.
     * 
     * @param tm
     *            the to set.
     */
    public void setTime(long tm);


    /**
     * get the event source.
     * 
     * @return the event source.
     */
    public Location source();


    /**
     * starting time of the event. The time is in UNIX format (milliseconds since midnight, 1/1/1971).
     * 
     * @return the start time.
     */
    public long startTime();


    /**
     * get the event target. Not all events have a target.
     * 
     * @return the event target, or <code>null</code> if none is associated.
     */
    public Location target();
}
